package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"kintai_backend/domain"
	"kintai_backend/graph/model"
	"kintai_backend/registry"
)

func (r *mutationResolver) SignUp(ctx context.Context, email string, password string, passwordConfirmation string, firstName string, lastName string) (*model.Worker, error) {
	registry := registry.GetRegistry()
	name := domain.NewWorkerName(firstName, lastName)
	if password != passwordConfirmation {
		return nil, newError(nil, "パスワードと確認用パスワードが一致しません")
	}
	worker, err := registry.WorkerUseCase().SignUp(
		domain.WorkerEmail(email), domain.WorkerRawPassword(password), name,
	)
	if err != nil {
		return nil, newError(err, "登録に失敗しました")
	}
	return model.NewWorker(worker), nil
}

func (r *queryResolver) Me(ctx context.Context) (*model.Worker, error) {
	worker, err := currentWorker(ctx)
	if err != nil {
		return nil, nil
	}
	return model.NewWorker(worker), nil
}

func (r *queryResolver) CompanyWorkers(ctx context.Context, companyID uint) ([]*model.Worker, error) {
	registry := registry.GetRegistry()
	workerId, err := currentWorkerId(ctx)
	if err != nil {
		return nil, newError(err, "ログインしてください")
	}
	workers, err := registry.WorkerUseCase().ListCompanyWorkers(*workerId, domain.CompanyID(companyID))
	if err != nil {
		return nil, newError(err, "社員一覧の取得に失敗しました")
	}
	return model.NewWorkers(workers), nil
}
