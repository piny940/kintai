package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"kintai_backend/domain"
	"kintai_backend/graph/model"
	"kintai_backend/registry"
	"time"
)

func (r *queryResolver) YearReport(ctx context.Context, companyID uint, year time.Time) (*model.YearReport, error) {
	registry := registry.GetRegistry()
	workerId, err := currentWorkerId(ctx)
	if err != nil {
		return nil, newError(err, "ログインしてください")
	}
	report, err := registry.WorkReportUseCase().GetYearReport(year, *workerId, domain.CompanyID(companyID))
	if err != nil {
		return nil, newError(err, "勤務実績の取得に失敗しました")
	}
	return model.NewYearReport(report)
}

func (r *queryResolver) MonthReport(ctx context.Context, companyID uint, month time.Time) (*model.MonthReport, error) {
	registry := registry.GetRegistry()
	workerId, err := currentWorkerId(ctx)
	if err != nil {
		return nil, newError(err, "ログインしてください")
	}
	report, err := registry.WorkReportUseCase().GetMonthReport(month, *workerId, domain.CompanyID(companyID))
	if err != nil {
		return nil, newError(err, "勤務実績の取得に失敗しました")
	}
	return model.NewMonthReport(report)
}
