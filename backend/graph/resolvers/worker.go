package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"kintai_backend/auth"
	"kintai_backend/domain"
	"kintai_backend/graph"
	"kintai_backend/graph/model"
)

func (r *queryResolver) Me(ctx context.Context) (*model.Worker, error) {
	echoCtx, err := echoContextFromContext(ctx)
	if err != nil {
		return nil, err
	}
	worker, err := auth.CurrentWorker(echoCtx)
	if err != nil {
		return nil, err
	}
	return &model.Worker{
		ID:     int(worker.ID),
		Status: workerStatusMap[worker.Status],
		Email:  string(worker.Email),
		Name: &model.WorkerName{
			FirstName: string(worker.Name.FirstName),
			LastName:  string(worker.Name.LastName),
		},
		CreatedAt: worker.CreatedAt,
		UpdatedAt: worker.UpdatedAt,
	}, nil
}

func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var workerStatusMap = map[domain.WorkerStatus]model.WorkerStatus{
	domain.WorkerActive:   model.WorkerStatusActive,
	domain.WorkerInactive: model.WorkerStatusInactive,
}
