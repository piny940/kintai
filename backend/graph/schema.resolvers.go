package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"kintai_backend/auth"
	"kintai_backend/domain"
	"kintai_backend/graph/model"
	"kintai_backend/registry"
	"kintai_backend/server"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.Worker, error) {
	registry := registry.GetRegistry()
	worker, err := registry.WorkerRepo().FindByEmail(domain.WorkerEmail(email))
	if err != nil {
		return nil, err
	}
	if !worker.Password.Check(domain.WorkerRawPassword(password)) {
		return nil, err
	}
	echoCtx, err := server.EchoContextFromContext()
	auth.Login(echoCtx, worker)
	return &model.Worker{
		ID:    int(worker.ID),
		Email: string(worker.Email),
		Name: &model.WorkerName{
			FirstName: string(worker.Name.FirstName),
			LastName:  string(worker.Name.LastName),
		},
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.Worker, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
